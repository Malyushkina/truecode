import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { AppModule } from './app.module';
import express from 'express';
import { join } from 'path';

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
async function bootstrap() {
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
  const app = await NestFactory.create(AppModule);

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const allowedOrigins = process.env.ALLOWED_ORIGINS
    ? process.env.ALLOWED_ORIGINS.split(',')
    : [
        'http://localhost:3000',
        'http://localhost:3002',
        'http://localhost:3001',
        'https://your-frontend-domain.vercel.app', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
        'https://truecode-frontend.vercel.app', // –ü—Ä–∏–º–µ—Ä –¥–æ–º–µ–Ω–∞
      ];

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å frontend
  app.enableCors({
    origin: allowedOrigins,
    methods: ['GET', 'POST', 'PATCH', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
  });

  // –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ uploads
  app.use('/uploads', express.static(join(process.cwd(), 'uploads')));

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∏–ø—ã DTO
      whitelist: true, // –£–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ DTO
      forbidNonWhitelisted: true, // –ó–∞–ø—Ä–µ—â–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ DTO
    }),
  );

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
  // –ï—Å–ª–∏ PORT –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º 3000
  const port = process.env.PORT ?? 3000;
  await app.listen(port);
  console.log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üåç –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bootstrap().catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  process.exit(1);
});
