import axios from 'axios';
import {
  Product,
  CreateProductDto,
  UpdateProductDto,
  QueryProductsDto,
  ProductsResponse,
} from '@/types/product';

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç axios –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
const apiBaseUrl = 'https://truecode.onrender.com';
const api = axios.create({
  baseURL: apiBaseUrl,
  headers: {
    'Content-Type': 'application/json',
  },
});

/**
 * API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
 */
export const productsApi = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  async getProducts(query: QueryProductsDto = {}): Promise<ProductsResponse> {
    const params = new URLSearchParams();

    if (query.page) params.append('page', query.page.toString());
    if (query.limit) params.append('limit', query.limit.toString());
    if (query.search) params.append('search', query.search);
    if (query.sortBy) params.append('sortBy', query.sortBy);
    if (query.sortOrder) params.append('sortOrder', query.sortOrder);
    if (query.minPrice) params.append('minPrice', query.minPrice.toString());
    if (query.maxPrice) params.append('maxPrice', query.maxPrice.toString());

    console.log(
      'üåê API Request:',
      `${apiBaseUrl}/products?${params.toString()}`
    );

    try {
      const response = await api.get(`/products?${params.toString()}`);
      console.log('‚úÖ API Response:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå API Error:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ UID
   */
  async getProduct(uid: string): Promise<Product> {
    const response = await api.get(`/products/${uid}`);
    return response.data;
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
   */
  async createProduct(data: CreateProductDto): Promise<Product> {
    const response = await api.post('/products', data);
    return response.data;
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ UID
   */
  async updateProduct(uid: string, data: UpdateProductDto): Promise<Product> {
    const response = await api.patch(`/products/${uid}`, data);
    return response.data;
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ UID
   */
  async deleteProduct(uid: string): Promise<Product> {
    const response = await api.delete(`/products/${uid}`);
    return response.data;
  },

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   */
  async uploadImage(uid: string, file: File): Promise<Product> {
    const formData = new FormData();
    formData.append('file', file);
    const response = await api.post(`/products/${uid}/image`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    return response.data;
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   */
  async deleteImage(uid: string): Promise<Product> {
    const response = await api.delete(`/products/${uid}/image`);
    return response.data;
  },
};

export default api;
